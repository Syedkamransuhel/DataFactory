{
	"name": "Incremental_pipeline",
	"properties": {
		"activities": [
			{
				"name": "watermark_loockup",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select * from [dbo].[watermarktable]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "watermark_sqltable_ds",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Source_loockup",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select MAX(ModifiedDateTime) as NewWatermarkvalue from  [dbo].[Fruits]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "az_sql_table_ds",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "incremental_copy_single_table",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "watermark_loockup",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Source_loockup",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select * from [dbo].[Fruits] where \nModifiedDateTime> '@{activity('watermark_loockup').output.firstRow.\nModifiedDateTime}' and \nModifiedDateTime<= '@{activity('Source_loockup').output.firstRow.NewWatermarkvalue}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "az_sql_table_ds",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "gen2_paquet_ds",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Stored procedure1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "incremental_copy_single_table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[updatewatermarks]",
					"storedProcedureParameters": {
						"ModifiedDateTime": {
							"value": {
								"value": "@activity('Source_loockup').output.firstRow.NewWatermarkvalue",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"tablename": {
							"value": {
								"value": "@activity('watermark_loockup').output.firstRow.tablename",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "azure_sql_ls",
					"type": "LinkedServiceReference"
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2023-11-23T18:14:24Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}